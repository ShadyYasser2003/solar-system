name: solar-system

on:
  push:
    branches:
      - main
      - 'feature/*'
env:
      MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
  # unit-tests:

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
          
  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Run unit tests
  #       id: nodejs-unit-testing-step 
  #       run: npm test

  #     # - name: Upload test results
  #     #   if: always()
  #     #   uses: actions/upload-artifact@v4
  #     #   with:
  #     #     name: test-results 
  #     #     path: test-results.xml

  #     - name: Archive Test Result
  #       if:  (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success') # work with failure only of workflow
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Mocha-Test-Result
  #         path: test-results.xml

  # code-coverage:
      
  #       name: Code Coverage
  #       runs-on: ubuntu-latest
  #       steps:
  #         - name: Checkout Repository
  #           uses: actions/checkout@v4
          
  #         - name: Setup NodeJS Version - 18
  #           uses: actions/setup-node@v3
  #           with:
  #             node-version: 18
              
  #         - name: Install Dependencies
  #           run: npm install
            
  #         - name: Check Code Coverage
  #           run: npm run coverage
  #           continue-on-error: true
            
  #         - name: Archive Test Result
  #           uses: actions/upload-artifact@v4
  #           with:
  #             name: Code-Coverage-Result
  #             path: coverage/
  #             retention-days: 5

       
          
  docker:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to github container registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }} 
            ghcr.io/shadyyasser2003/solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live    

  dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
          
        - name: Configure AWS credentials for EKS
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1  # غيّرها حسب منطقة الكلاستر بتاعك
    
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

        - name: Set KubeConfig file
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            context: eks_user@shadi-cluster.us-east-1.eksctl.io
            kubeconfig: ${{ secrets.KUBE_CONFIG }}


        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            echo ---------------------
            kubectl get nodes          