
on:
  push:
    branches: 
      - main
      - 'feature/*'
env:
    MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }} 
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    MONGO_URL: mongodb+srv://${{ secrets.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@supercluster.d83jj.mongodb.net/superData?retryWrites=true&w=majority
jobs:
  unit-tests: 
    
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        id: nodejs-unit-testing-step 
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results 
          path: test-results.xml

      - name: Archive Test Result
        if:  (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success') # work with failure only of workflow
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage: 

        name: Code Coverage
        runs-on: self-hosted
        needs: unit-tests
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
          
          - name: Setup NodeJS Version - 18
            uses: actions/setup-node@v3
            with:
              node-version: 18
              
          - name: Install Dependencies
            run: npm install
            
          - name: Check Code Coverage
            run: npm run coverage
            continue-on-error: true
            
          - name: Archive Test Result
            uses: actions/upload-artifact@v4
            with:
              name: Code-Coverage-Result
              path: coverage/
              retention-days: 5

  reports-s3:
      needs: [code-coverage, unit-tests]
      name: AMS S3 - Upload Reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Download Mocha Test Artifact
          uses: actions/download-artifact@v4
          with:
            name: Mocha-Test-Result 

        - name: Download Code Coverage Artifact
          uses: actions/download-artifact@v4
          with:
            name: Code-Coverage-Result
            
        - name: Merge Test Files
          run: |
            ls -ltr
            mkdir reports-${{ github.sha }}
            mv cobertura-coverage.xml reports-${{ github.sha }}/
            mv test-results.xml reports-${{ github.sha }}/
            ls -ltr reports-${{ github.sha }}/
        - name: Upload to S3
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --acl public-read --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: reports-bucket-shady-yasser
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
            AWS_REGION: 'us-east-1'
            SOURCE_DIR: reports-${{ github.sha }}
            DEST_DIR: reports/${{ github.sha }}

            
  docker: 
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: [code-coverage]  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to github container registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }} 
            ghcr.io/shadyyasser2003/solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

          # export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          # echo $IP

          # echo Testing Image URL using wget
          # wget -q -O - 127.0.0.1:3000/live | grep live    

  dev-deploy:
    name: dev Deployment
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-workflow.yml
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    with:
      MONGO_URL: ${{ vars.MONGO_URL }}
      kubernates-manifest-path: kubernetes/development/
      environment: development
         
  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: self-hosted
    env:
        URL: ${{ needs.dev-deploy.outputs.ingress_ip }}
    steps:
      - name: test before testing  

        run: | 
          echo "Testing on $URL"
          RESPONSE=$(curl -sS "http://$URL:32000/live")
          echo "Response: $RESPONSE"
          echo "$RESPONSE" | jq -r '.status' | grep -i live

      - name: Test URL Output using CURL and JQ
        run: |
          echo "Testing on $URL"
          curl -sS "http://$URL:32000/live" | jq -r '.status' | grep -i live   


  prod-deploy:
    name: prod Deployment 
    needs: docker
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/reuse-workflow.yml 
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    with:
      MONGO_URL: ${{ vars.MONGO_URL }}
      kubernates-manifest-path: kubernetes/production/
      environment: production 
      

  prod-integration-testing:
        if: github.ref == 'refs/heads/main'
        name: PROD Integration Testing
        needs: prod-deploy
        runs-on: self-hosted
        env:
            URL: ${{ needs.prod-deploy.outputs.ingress_ip }}
        steps:
          - name: test before testing  
            run: | 
              echo "Testing on $URL"
              RESPONSE=$(curl -sS "http://$URL:32000/live")
              echo "Response: $RESPONSE"
              echo "$RESPONSE" | jq -r '.status' | grep -i live

          - name: Test URL Output using CURL and JQ
            run: |
              echo "Testing on $URL"
              curl -sS "http://$URL:32000/live" | jq -r '.status' | grep -i live

  # slack-notification:
  #   if: always()
  #   name: Slack Notification
  #   needs: [dev-integration-testing, prod-integration-testing]
  #   continue-on-error: true
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Slack Notification
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #         SLACK_CHANNEL: github-actions-channel-2
  #         SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
  #         SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
  #         SLACK_MESSAGE: ":hammer_and_wrench Triggered by ${{ github.actor }}"
  #         SLACK_TITLE: Information